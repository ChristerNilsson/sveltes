{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\tdocument.title = 'RPN Calculator'\r\n\r\n\tlet stack = []\r\n\tlet history = []\r\n\tlet commands = ''\r\n\r\n\tconst par0 = {}\r\n\tconst par1 = {}\r\n\tconst par2 = {}\r\n\r\n\tpar0['drop'] = () => stack.pop()\r\n\tpar0['pi']   = () => stack.push(Math.PI)\r\n\tpar0['e']    = () => stack.push(Math.E)\r\n\tpar0['swap'] = () => stack.push(stack.pop(), stack.pop() )\r\n\tpar0['clr']  = () => stack = []\r\n\t\r\n\tpar1['x^2']  = x => x * x\r\n\tpar1['sqrt'] = x => Math.sqrt(x)\r\n\tpar1['chs']  = x => -x\r\n\tpar1['1/x']  = x => 1/x\r\n\tpar1['abs']  = x => Math.abs(x)\r\n\tpar1['10^x'] = x => 10 ** x\r\n\tpar1['log']  = x => Math.log10(x)\r\n\tpar1['exp']  = x => Math.exp(x)\r\n\tpar1['ln']   = x => Math.log(x)\r\n\tpar1['sin']  = x => Math.sin(x / 180 * Math.PI)\r\n\tpar1['cos']  = x => Math.cos(x / 180 * Math.PI)\r\n\tpar1['tan']  = x => Math.tan(x / 180 * Math.PI)\r\n\tpar1['asin'] = x => Math.asin(x) * 180 / Math.PI\r\n\tpar1['acos'] = x => Math.acos(x) * 180 / Math.PI \r\n\tpar1['atan'] = x => Math.atan(x) * 180  / Math.PI\r\n\r\n\tpar2['+']    = (x,y) => y + x\r\n\tpar2['*']    = (x,y) => y * x\r\n\tpar2['-']    = (x,y) => y - x\r\n\tpar2['/']    = (x,y) => y / x\r\n\tpar2['y^x']  = (x,y) => y ** x\r\n\tpar2['atan2']= (x,y) => Math.atan2(y,x) * 180 / Math.PI\r\n\tpar2['hypot']= (x,y) => Math.sqrt(x * x + y * y)\r\n\tpar2['s']    = (x,y) => y + x\r\n\tpar2['p']    = (x,y) => x*y/(x+y)  // parallel resistors\r\n\r\n\tconst calc = (cmd) => {\r\n\t\tif (cmd in par0) par0[cmd]()\r\n\t\telse if (cmd in par1) stack.push(par1[cmd](stack.pop()))\r\n\t\telse if (cmd in par2) stack.push(par2[cmd](stack.pop(), stack.pop()))\r\n\t\telse if (!isNaN(parseFloat(cmd))) stack.push(parseFloat(cmd))\r\n\t}\r\n\r\n\tfunction showHistory(delta) {\r\n\t\tif (history.length==0) return\r\n\t\telse if (delta==-1) history.push(history.shift())\r\n\t\telse history.unshift(history.pop())\r\n\t\tcommands = history[0]\r\n\t}\r\n\r\n\tfunction onkeyup (event) {\r\n\t\tif (event.key == 'Escape') commands = ''\r\n\t\telse if (event.key=='ArrowUp') showHistory(-1)\r\n\t\telse if (event.key=='ArrowDown') showHistory(1)\r\n\t\telse if (event.key == 'Enter') {\r\n\t\t\tcommands.split(' ').map( (cmd) => { calc(cmd) })\r\n\t\t\tif (!history.includes(commands)) history.push(commands)\r\n\t\t\tcommands = ''\r\n\t\t\tstack=stack\r\n\t\t}\r\n\t}\r\n\r\n</script> \r\n\r\n<style>\r\n\tinput,div {\r\n\t\tfont-size: 30px;\r\n\t\tfont-family: 'Courier New', Courier, monospace\r\n\t}\r\n</style>\r\n\r\n<div>{document.title}</div>\r\n{#each [par0,par1,par2] as par}\r\n\t<div>{Object.keys(par).join(' ')}</div>\r\n{/each}\r\n{#each stack as item}\r\n\t<div>{item}</div>\r\n{/each}\r\n<input on:keyup = {onkeyup} type=\"text\" bind:value = {commands} placeholder='Enter commands separated with spaces'>\r\n"
  ],
  "names": [],
  "mappings": "AAwEC,mBAAK,CAAC,GAAG,cAAC,CAAC,AACV,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS;CAC/C,CAAC"
}