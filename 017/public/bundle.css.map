{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\Shortcut.svelte",
    "..\\src\\Commands.svelte",
    "..\\src\\Statistics.svelte",
    "..\\src\\Navigation.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport Shortcut from './Shortcut.svelte'\r\n\timport range from 'lodash.range'\r\n\timport random from 'lodash.random'\r\n\timport sample from 'lodash.sample'\r\n\timport shuffle from 'lodash.shuffle'\r\n\timport {solve} from './solve.js'\r\n\r\n\tconst url = new URL(window.location.href)\r\n\tconst getParam = (name,value) => parseInt(url.searchParams.get(name) || value)\r\n\r\n\tlet data = {}\r\n\tlet index = 0\r\n\tlet curr = null\r\n\r\n\tdata.M = getParam('M',3) // MAX level\r\n\tdata.N = getParam('N',24) // exercises\r\n\tdata.MAX = getParam('MAX',20) // MAX number\r\n\tdata.SHUFFLE = getParam('SHUFFLE',0) // 1\r\n\tdata.ADD = getParam('ADD',2)\r\n\tdata.MUL = getParam('MUL',2)\r\n\tdata.DIV = getParam('DIV',2)\r\n\tdata.SUB = getParam('SUB',0)\r\n\r\n\tif (data.N % data.M !=0) data.M = data.N\r\n\r\n\tdata.score = 0\r\n\tdata.undos = 0\r\n\r\n\tdata.start = new Date()\r\n\tdata.stopp = new Date()\r\n\r\n\tdata.optimum = 0\r\n\r\n\t$: curr = data.cand[index]\r\n\r\n\tconst createCandidates = (n) => {\r\n\t\tlet a = random(0,data.MAX)\r\n\r\n\t\tlet cands0 = [a]\r\n\t\tconst visited = {}\r\n\t\tconst memory = {}\r\n\t\tvisited[a.toString()] = 0\r\n\t\tmemory[a.toString()] = a\r\n\r\n\t\tfor (const lvl of range(n)) {\r\n\t\t\tconst cands1 = []\r\n\t\t\tconst op = (p) => {\r\n\t\t\t\tif (-data.MUL*data.MAX <= p && p <= data.MUL*data.MAX) {\r\n\t\t\t\t\tconst key = p.toString()\r\n\t\t\t\t\tif (!(key in memory)) {\r\n\t\t\t\t\t\tcands1.push(p)\r\n\t\t\t\t\t\tvisited[key] = lvl+1\r\n\t\t\t\t\t\tmemory[key] = p\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (const cand of cands0) {\r\n\t\t\t\tif (data.ADD != 0) op(cand + data.ADD)\r\n\t\t\t\tif (data.SUB == 0) op(cand - data.SUB)\r\n\t\t\t\tif (data.MUL > 1) op(cand * data.MUL)\r\n\t\t\t\tif (data.DIV > 1 && cand % data.DIV==0) op(cand / data.DIV)\r\n\t\t\t}\r\n\t\t\tcands0 = cands1\r\n\t\t}\r\n\t\tif (cands0.length > 0) {\r\n\t\t\tconst target = sample(cands0)\r\n\t\t\tconst key = target.toString()\r\n\t\t\tdata.optimum += visited[key]\r\n\t\t\treturn {a:a, b:target, hist:[], orig:a}\r\n\t\t} else {\r\n\t\t\tconst key = sample(Object.keys(visited))\r\n\t\t\tdata.optimum += visited[key]\r\n\t\t\treturn {a:a, b:memory[key], hist:[], orig:a}\r\n\t\t}\r\n\t}\r\n\r\n\tlet candidates = []\r\n\tfor (const level of range(data.M)) {\r\n\t\tfor (const j of range(data.N/data.M)) {\r\n\t\t\tcandidates.push(createCandidates(level+1))\r\n\t\t}\r\n\t}\r\n\r\n\tdata.cand = data.SHUFFLE==1 ? shuffle(candidates) : candidates\r\n\r\n\tdata.op = (value) => {\r\n\t\tif (curr.a==value) return\r\n\t\tcurr.hist.push(curr.a)\r\n\t\tcurr.a = value\r\n\t\tdata.score++\r\n\t\tdata.stopp = new Date()\r\n\t}\r\n\r\n\tdata.undo = () => {\r\n\t\tdata.score--\r\n\t\tdata.undos++\r\n\t\tcurr.a = curr.hist.pop()\r\n\t}\r\n\r\n\tdata.reset = () => {\r\n\t\tdata.start = new Date()\r\n\t\tdata.stopp = new Date()\r\n\t\tdata.score = 0\r\n\t\tdata.undos = 0\r\n\t\tindex = 0\r\n\r\n\t\tfor (const c of data.cand) {\r\n\t\t\tc.a = c.orig\r\n\t\t\tc.hist = []\r\n\t\t}\r\n\t}\r\n\r\n\tdata.click = (i) => index = i\r\n\tdata.incr = (delta) => index += delta\r\n\r\n\tconst handleKeyDown = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tif (event.key=='ArrowLeft' && index > 0) index--\r\n\t\tif (event.key=='ArrowRight' && index < data.N-1) index++\r\n\t\tif (event.key==' ') index = (index+1) % data.N\r\n\t\tif (event.key=='Home') index = 0\r\n\t\tif (event.key=='End') index=(data.N-1)\r\n\t\tif (event.key=='a' && curr.a!=curr.b) data.op(curr.a + data.ADD)\r\n\t\tif (event.key=='s' && curr.a!=curr.b) data.op(curr.a - data.SUB)\r\n\t\tif ((event.key=='m' || event.key=='w') && curr.a!=curr.b) data.op(curr.a * data.MUL)\r\n\t\tif (event.key=='d' && curr.a!=curr.b && curr.a % data.DIV==0) data.op(curr.a / data.DIV)\r\n\t\tif (event.key=='z' && curr.hist.length > 0) data.undo()\r\n\t\tif (event.key=='r') data.reset()\r\n\t}\r\n\r\n\tlet message = ''\r\n\r\n\tdata.mm = (name,detail='') => {\r\n\t\tif (name=='info') message = 'click title for info about how to use and customize Shortcut'\r\n\t\tif (name=='score') message = 'number of steps you have used'\r\n\t\tif (name=='optimum') message = 'minimum number of steps needed'\r\n\t\tif (name=='undos') message = 'number of undos. Minimize'\r\n\t\tif (name=='time') message = 'number of seconds you have used. Minimize'\r\n\t\tif (name=='left') message = 'make this number equal to the target number'\r\n\t\tif (name=='right') message = 'this is the target number'\r\n\t\tif (name=='prev') message = 'goto previous exercise. Key=leftArrow'\r\n\t\tif (name=='next') message = 'goto next exercise. Key=rightArrow or space'\r\n\t\tif (name=='add') message = 'add to left number. Key=a'\r\n\t\tif (name=='mul') message = 'multiply left number. Key=w or m'\r\n\t\tif (name=='sub') message = 'subtract from left number. Key=s'\r\n\t\tif (name=='div') message = 'divide left number. Key=d'\r\n\t\tif (name=='undo') message = 'undo last operation. Key=z'\r\n\t\tif (name=='circle') message = 'jump to exercise #' + detail\r\n\t}\r\n\r\n</script>\r\n\r\n<style>\r\n\t.w {width:100%}\r\n\ta {text-decoration: none;color: #000}\r\n\t.fs {font-size:1.5em}\r\n</style>\r\n\r\n<svelte:window on:keydown={handleKeyDown} />\r\n<a href=\"https://github.com/ChristerNilsson/svelte-projects/wiki/017\"\r\n\tclass='center-align'\r\n\ton:mousemove={() => data.mm('info')}\r\n\ttarget=\"_blank\"><h1>Shortcut</h1></a>\r\n<div style=\"width:90%; margin:auto\">\r\n\t<Shortcut {data} {index} {curr}/>\r\n</div>\r\n<div class='w fs center-align'>{message}</div>\r\n",
    "<script>\r\n\timport Navigation from \t'./Navigation.svelte'\r\n\timport Commands from \t'./Commands.svelte'\r\n\timport Statistics from \t'./Statistics.svelte'\r\n\timport Indicator from \t'./Indicator.svelte'\r\n\r\n\texport let data,curr,index\r\n\r\n\t$: bgcolor = curr.a==curr.b ? 'green' : 'grey'\r\n\r\n</script>\r\n\r\n<style>\r\n\t.w {width:100%}\r\n\t.fs {font-size:1.5em}\r\n\t.fs2 {font-size:2em}\r\n\t.marg {margin: 0px}\r\n\t.br {border-radius:5px}\r\n</style>\r\n\r\n<div class=\"w row s12 br fs marg {bgcolor} lighten-1 black-text center-align\" >\r\n\t<Navigation bind:data={data} bind:curr={curr} bind:index={index} />\r\n\t<Commands   bind:data={data} bind:curr={curr} />\r\n\t<Statistics bind:data={data} />\r\n\t<Indicator  bind:data={data} bind:index={index} />\r\n</div>\r\n",
    "<script>\r\n\texport let data,curr\r\n\t$: done = curr.a == curr.b\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.marg {margin: 0px}\r\n\t.br {border-radius:5px}\r\n</style>\r\n\r\n<div class=\"row\">\r\n\r\n\t{#if done}\r\n\t\t<div class=\"left col s12 fs marg center-align\">{curr.hist.length} steps</div>\r\n\t{:else}\r\n\t\t<div class=\"left col s3 fs marg center-align\"></div>\r\n\t\t<div class=\"left col s6 fs marg center-align\">\r\n\t\t\t{#if (data.ADD!=0)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('add')} class=br on:click={() => data.op(curr.a+data.ADD)} disabled={done}>add {data.ADD}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (data.SUB!=0)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('sub')} class=br on:click={() => data.op(curr.a-data.SUB)} disabled={done}>sub {data.SUB}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (data.MUL!=1)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('mul')} class=br on:click={() => data.op(curr.a*data.MUL)} disabled={done}>mul {data.MUL}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (data.DIV!=1)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('div')} class=br on:click={() => data.op(curr.a/data.DIV)} disabled={done || curr.a % data.DIV != 0} >div {data.DIV}</button>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t\t<div class=\"left col s3 fs marg right-align\">\r\n\t\t\t<button on:mousemove={(evt) => data.mm('undo')} class=br on:click={data.undo} disabled={curr.hist.length==0}>Undo</button>\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n",
    "<script>\r\n\texport let data\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.marg {margin: 0px}\r\n</style>\r\n\r\n<div class=\"row s12\" >\r\n\t<div on:mousemove={() => data.mm('score')} class=\"left col s6 fs marg green yellow-text left-align\">{data.score}</div>\r\n\t<div on:mousemove={() => data.mm('undos')} class=\"left col s6 fs marg green right-align\">{data.undos} undos</div>\r\n\r\n\t<div on:mousemove={() => data.mm('optimum')} class=\"left col s6 fs marg green left-align\">{data.optimum}</div>\r\n\t<div on:mousemove={() => data.mm('time')} class=\"left col s6 fs marg green right-align\">{(data.stopp - data.start)/1000}</div>\r\n</div>\r\n",
    "<script>\r\n\texport let data,curr,index\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.br {border-radius:5px}\r\n</style>\r\n\r\n<div class='col s3 fs left-align' >\r\n\t<button on:mousemove={() => data.mm('prev')} class=br on:click={() => data.incr(-1)} disabled={index==0}>prev</button>\r\n</div>\r\n\r\n<div class='col s6 fs center-align' >\r\n\t{#if curr.a == curr.b}\r\n\t\t{curr.orig} to {curr.b}\r\n\t{:else}\r\n\t\t<span on:mousemove={() => data.mm('left')}>{curr.a}</span>\r\n\t\tto \r\n\t\t<span on:mousemove={() => data.mm('right')}>{curr.b}</span>\r\n\t{/if}\r\n</div>\r\n\r\n<div class='col s3 fs right-align' >\r\n\t<button on:mousemove={() => data.mm('next')} class=br on:click={() => data.incr(+1)} disabled={index==data.N-1}>next</button>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AA0JC,EAAE,cAAC,CAAC,MAAM,IAAI,CAAC,AACf,CAAC,cAAC,CAAC,eAAe,CAAE,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,AACrC,GAAG,cAAC,CAAC,UAAU,KAAK,CAAC;AC/IrB,EAAE,eAAC,CAAC,MAAM,IAAI,CAAC,AACf,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,IAAI,eAAC,CAAC,UAAU,GAAG,CAAC,AACpB,KAAK,eAAC,CAAC,MAAM,CAAE,GAAG,CAAC,AACnB,GAAG,eAAC,CAAC,cAAc,GAAG,CAAC;ACXvB,GAAG,cAAC,CAAC,UAAU,KAAK,CAAC,AACrB,KAAK,cAAC,CAAC,MAAM,CAAE,GAAG,CAAC,AACnB,GAAG,cAAC,CAAC,cAAc,GAAG,CAAC;ACHvB,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,KAAK,eAAC,CAAC,MAAM,CAAE,GAAG,CAAC;ACDnB,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,GAAG,eAAC,CAAC,cAAc,GAAG,CAAC"
}